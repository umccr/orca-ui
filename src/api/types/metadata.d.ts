/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/contact/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["contactList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/contact/{orcabusId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Since we have custom orcabus_id prefix for each model, we need to remove the prefix before retrieving it. */
        get: operations["contactRetrieve"];
        put?: never;
        post?: never;
        delete: operations["contactDestroy"];
        options?: never;
        head?: never;
        patch: operations["contactPartialUpdate"];
        trace?: never;
    };
    "/api/v1/contact/{orcabusId}/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve the history of this model */
        get: operations["contactHistoryList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/individual/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["individualList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/individual/{orcabusId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Since we have custom orcabus_id prefix for each model, we need to remove the prefix before retrieving it. */
        get: operations["individualRetrieve"];
        put?: never;
        post?: never;
        delete: operations["individualDestroy"];
        options?: never;
        head?: never;
        patch: operations["individualPartialUpdate"];
        trace?: never;
    };
    "/api/v1/individual/{orcabusId}/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve the history of this model */
        get: operations["individualHistoryList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/library/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["libraryList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/library/{orcabusId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Since we have custom orcabus_id prefix for each model, we need to remove the prefix before retrieving it. */
        get: operations["libraryRetrieve"];
        put?: never;
        post?: never;
        delete: operations["libraryDestroy"];
        options?: never;
        head?: never;
        patch: operations["libraryPartialUpdate"];
        trace?: never;
    };
    "/api/v1/library/{orcabusId}/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve the history of this model */
        get: operations["libraryHistoryList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/project/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["projectList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/project/{orcabusId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Since we have custom orcabus_id prefix for each model, we need to remove the prefix before retrieving it. */
        get: operations["projectRetrieve"];
        put?: never;
        post?: never;
        delete: operations["projectDestroy"];
        options?: never;
        head?: never;
        patch: operations["projectPartialUpdate"];
        trace?: never;
    };
    "/api/v1/project/{orcabusId}/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve the history of this model */
        get: operations["projectHistoryList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sample/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sampleList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sample/{orcabusId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Since we have custom orcabus_id prefix for each model, we need to remove the prefix before retrieving it. */
        get: operations["sampleRetrieve"];
        put?: never;
        post?: never;
        delete: operations["sampleDestroy"];
        options?: never;
        head?: never;
        patch: operations["samplePartialUpdate"];
        trace?: never;
    };
    "/api/v1/sample/{orcabusId}/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve the history of this model */
        get: operations["sampleHistoryList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subject/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["subjectList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subject/{orcabusId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Since we have custom orcabus_id prefix for each model, we need to remove the prefix before retrieving it. */
        get: operations["subjectRetrieve"];
        put?: never;
        post?: never;
        delete: operations["subjectDestroy"];
        options?: never;
        head?: never;
        patch: operations["subjectPartialUpdate"];
        trace?: never;
    };
    "/api/v1/subject/{orcabusId}/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve the history of this model */
        get: operations["subjectHistoryList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sync/gsheet/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Sync metadata with the Google tracking sheet */
        post: operations["syncGsheetCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sync/presigned-csv/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Sync metadata from the provided csv presigned url. */
        post: operations["syncPresignedCsvCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {unknown} */
        BlankEnum: "";
        Contact: {
            readonly orcabusId: string;
            contactId?: string | null;
            name?: string | null;
            description?: string | null;
            /** Format: email */
            email?: string | null;
        };
        ContactDetail: {
            readonly orcabusId: string;
            readonly projectSet: components["schemas"]["Project"][];
            contactId?: string | null;
            name?: string | null;
            description?: string | null;
            /** Format: email */
            email?: string | null;
        };
        ContactHistory: {
            readonly historyId: number;
            readonly orcabusId: string;
            contactId?: string | null;
            name?: string | null;
            description?: string | null;
            /** Format: email */
            email?: string | null;
            historyUserId?: string | null;
            /** Format: date-time */
            historyDate: string;
            historyChangeReason?: string | null;
            historyType: components["schemas"]["HistoryTypeEnum"];
        };
        /**
         * @description * `+` - Created
         *     * `~` - Changed
         *     * `-` - Deleted
         * @enum {string}
         */
        HistoryTypeEnum: "+" | "~" | "-";
        Individual: {
            readonly orcabusId: string;
            individualId?: string | null;
            source?: string | null;
        };
        IndividualDetail: {
            readonly orcabusId: string;
            readonly subjectSet: components["schemas"]["Subject"][];
            individualId?: string | null;
            source?: string | null;
        };
        IndividualHistory: {
            readonly historyId: number;
            readonly orcabusId: string;
            individualId?: string | null;
            source?: string | null;
            historyUserId?: string | null;
            /** Format: date-time */
            historyDate: string;
            historyChangeReason?: string | null;
            historyType: components["schemas"]["HistoryTypeEnum"];
        };
        Library: {
            readonly orcabusId: string;
            libraryId?: string | null;
            phenotype?: (components["schemas"]["PhenotypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            workflow?: (components["schemas"]["WorkflowEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            quality?: (components["schemas"]["QualityEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            type?: (components["schemas"]["TypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            assay?: string | null;
            /** Format: double */
            coverage?: number | null;
            sample?: string | null;
            subject?: string | null;
        };
        LibraryDetail: {
            readonly orcabusId: string;
            readonly projectSet: components["schemas"]["Project"][];
            readonly sample: components["schemas"]["Sample"];
            readonly subject: components["schemas"]["Subject"];
            libraryId?: string | null;
            phenotype?: (components["schemas"]["PhenotypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            workflow?: (components["schemas"]["WorkflowEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            quality?: (components["schemas"]["QualityEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            type?: (components["schemas"]["TypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            assay?: string | null;
            /** Format: double */
            coverage?: number | null;
        };
        LibraryHistory: {
            readonly historyId: number;
            readonly projectSet: string[];
            readonly orcabusId: string;
            libraryId?: string | null;
            phenotype?: (components["schemas"]["PhenotypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            workflow?: (components["schemas"]["WorkflowEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            quality?: (components["schemas"]["QualityEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            type?: (components["schemas"]["TypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            assay?: string | null;
            /** Format: double */
            coverage?: number | null;
            historyUserId?: string | null;
            /** Format: date-time */
            historyDate: string;
            historyChangeReason?: string | null;
            historyType: components["schemas"]["HistoryTypeEnum"];
            sample?: string | null;
            subject?: string | null;
        };
        /** @enum {unknown} */
        NullEnum: null;
        PaginatedContactDetailList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["ContactDetail"][];
        };
        PaginatedContactHistoryList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["ContactHistory"][];
        };
        PaginatedIndividualDetailList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["IndividualDetail"][];
        };
        PaginatedIndividualHistoryList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["IndividualHistory"][];
        };
        PaginatedLibraryDetailList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["LibraryDetail"][];
        };
        PaginatedLibraryHistoryList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["LibraryHistory"][];
        };
        PaginatedProjectDetailList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["ProjectDetail"][];
        };
        PaginatedProjectHistoryList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["ProjectHistory"][];
        };
        PaginatedSampleDetailList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["SampleDetail"][];
        };
        PaginatedSampleHistoryList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["SampleHistory"][];
        };
        PaginatedSubjectDetailList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["SubjectDetail"][];
        };
        PaginatedSubjectHistoryList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["SubjectHistory"][];
        };
        PatchedContact: {
            readonly orcabusId?: string;
            contactId?: string | null;
            name?: string | null;
            description?: string | null;
            /** Format: email */
            email?: string | null;
        };
        PatchedIndividual: {
            readonly orcabusId?: string;
            individualId?: string | null;
            source?: string | null;
        };
        PatchedLibrary: {
            readonly orcabusId?: string;
            libraryId?: string | null;
            phenotype?: (components["schemas"]["PhenotypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            workflow?: (components["schemas"]["WorkflowEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            quality?: (components["schemas"]["QualityEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            type?: (components["schemas"]["TypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            assay?: string | null;
            /** Format: double */
            coverage?: number | null;
            sample?: string | null;
            subject?: string | null;
        };
        PatchedProject: {
            readonly orcabusId?: string;
            projectId?: string | null;
            name?: string | null;
            description?: string | null;
        };
        PatchedSample: {
            readonly orcabusId?: string;
            sampleId?: string | null;
            externalSampleId?: string | null;
            source?: (components["schemas"]["SourceEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
        };
        PatchedSubject: {
            readonly orcabusId?: string;
            subjectId?: string | null;
        };
        /**
         * @description * `normal` - Normal
         *     * `tumor` - Tumor
         *     * `negative-control` - Negative Control
         * @enum {string}
         */
        PhenotypeEnum: "normal" | "tumor" | "negative-control";
        Project: {
            readonly orcabusId: string;
            projectId?: string | null;
            name?: string | null;
            description?: string | null;
        };
        ProjectDetail: {
            readonly orcabusId: string;
            readonly contactSet: components["schemas"]["Contact"][];
            projectId?: string | null;
            name?: string | null;
            description?: string | null;
        };
        ProjectHistory: {
            readonly historyId: number;
            readonly contactSet: string[];
            readonly orcabusId: string;
            projectId?: string | null;
            name?: string | null;
            description?: string | null;
            historyUserId?: string | null;
            /** Format: date-time */
            historyDate: string;
            historyChangeReason?: string | null;
            historyType: components["schemas"]["HistoryTypeEnum"];
        };
        /**
         * @description * `very-poor` - VeryPoor
         *     * `poor` - Poor
         *     * `good` - Good
         *     * `borderline` - Borderline
         * @enum {string}
         */
        QualityEnum: "very-poor" | "poor" | "good" | "borderline";
        Sample: {
            readonly orcabusId: string;
            sampleId?: string | null;
            externalSampleId?: string | null;
            source?: (components["schemas"]["SourceEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
        };
        SampleDetail: {
            readonly orcabusId: string;
            readonly librarySet: components["schemas"]["Library"][];
            sampleId?: string | null;
            externalSampleId?: string | null;
            source?: (components["schemas"]["SourceEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
        };
        SampleHistory: {
            readonly historyId: number;
            readonly orcabusId: string;
            sampleId?: string | null;
            externalSampleId?: string | null;
            source?: (components["schemas"]["SourceEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            historyUserId?: string | null;
            /** Format: date-time */
            historyDate: string;
            historyChangeReason?: string | null;
            historyType: components["schemas"]["HistoryTypeEnum"];
        };
        /**
         * @description * `ascites` - Ascites
         *     * `blood` - Blood
         *     * `bone-marrow` - BoneMarrow
         *     * `buccal` - Buccal
         *     * `cell-line` - Cell_line
         *     * `cfDNA` - Cfdna
         *     * `cyst-fluid` - Cyst Fluid
         *     * `DNA` - Dna
         *     * `eyebrow-hair` - Eyebrow Hair
         *     * `FFPE` - Ffpe
         *     * `FNA` - Fna
         *     * `OCT` - Oct
         *     * `organoid` - Organoid
         *     * `PDX-tissue` - Pdx Tissue
         *     * `plasma-serum` - Plasma Serum
         *     * `RNA` - Rna
         *     * `tissue` - Tissue
         *     * `skin` - Skin
         *     * `water` - Water
         * @enum {string}
         */
        SourceEnum: "ascites" | "blood" | "bone-marrow" | "buccal" | "cell-line" | "cfDNA" | "cyst-fluid" | "DNA" | "eyebrow-hair" | "FFPE" | "FNA" | "OCT" | "organoid" | "PDX-tissue" | "plasma-serum" | "RNA" | "tissue" | "skin" | "water";
        Subject: {
            readonly orcabusId: string;
            subjectId?: string | null;
        };
        SubjectDetail: {
            readonly orcabusId: string;
            readonly individualSet: components["schemas"]["Individual"][];
            readonly librarySet: components["schemas"]["Library"][];
            subjectId?: string | null;
        };
        SubjectHistory: {
            readonly historyId: number;
            readonly individualSet: string[];
            readonly orcabusId: string;
            subjectId?: string | null;
            historyUserId?: string | null;
            /** Format: date-time */
            historyDate: string;
            historyChangeReason?: string | null;
            historyType: components["schemas"]["HistoryTypeEnum"];
        };
        SyncCustomCsv: {
            /** Format: uri */
            presignedUrl: string;
            reason?: string;
        };
        SyncGSheet: {
            year: string;
        };
        /**
         * @description * `10X` - Ten X
         *     * `BiModal` - Bimodal
         *     * `ctDNA` - Ct Dna
         *     * `ctTSO` - Ct Tso
         *     * `exome` - Exome
         *     * `MeDIP` - Me Dip
         *     * `Metagenm` - Metagenm
         *     * `MethylSeq` - Methyl Seq
         *     * `TSO-DNA` - TSO_DNA
         *     * `TSO-RNA` - TSO_RNA
         *     * `WGS` - Wgs
         *     * `WTS` - Wts
         *     * `other` - Other
         * @enum {string}
         */
        TypeEnum: "10X" | "BiModal" | "ctDNA" | "ctTSO" | "exome" | "MeDIP" | "Metagenm" | "MethylSeq" | "TSO-DNA" | "TSO-RNA" | "WGS" | "WTS" | "other";
        /**
         * @description * `clinical` - Clinical
         *     * `research` - Research
         *     * `qc` - Qc
         *     * `control` - Control
         *     * `bcl` - Bcl
         *     * `manual` - Manual
         * @enum {string}
         */
        WorkflowEnum: "clinical" | "research" | "qc" | "control" | "bcl" | "manual";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    contactList: {
        parameters: {
            query?: {
                contactId?: string | null;
                description?: string | null;
                email?: string | null;
                name?: string | null;
                orcabusId?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedContactDetailList"];
                };
            };
        };
    };
    contactRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this contact. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactDetail"];
                };
            };
        };
    };
    contactDestroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this contact. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    contactPartialUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this contact. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PatchedContact"];
                "multipart/form-data": components["schemas"]["PatchedContact"];
                "application/json": components["schemas"]["PatchedContact"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contact"];
                };
            };
        };
    };
    contactHistoryList: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A unique value identifying this contact. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedContactHistoryList"];
                };
            };
        };
    };
    individualList: {
        parameters: {
            query?: {
                individualId?: string | null;
                orcabusId?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
                source?: string | null;
                subjectSet?: components["schemas"]["Subject"][];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedIndividualDetailList"];
                };
            };
        };
    };
    individualRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this individual. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IndividualDetail"];
                };
            };
        };
    };
    individualDestroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this individual. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    individualPartialUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this individual. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PatchedIndividual"];
                "multipart/form-data": components["schemas"]["PatchedIndividual"];
                "application/json": components["schemas"]["PatchedIndividual"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Individual"];
                };
            };
        };
    };
    individualHistoryList: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A unique value identifying this individual. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedIndividualHistoryList"];
                };
            };
        };
    };
    libraryList: {
        parameters: {
            query?: {
                assay?: string | null;
                coverage?: number | null;
                /** @description Filter based on 'coverage' that is greater than or equal to the given value. */
                "coverage[gte]"?: number;
                /** @description Filter based on 'coverage' that is less than or equal to the given value. */
                "coverage[lte]"?: number;
                libraryId?: string | null;
                orcabusId?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description * `normal` - Normal
                 *     * `tumor` - Tumor
                 *     * `negative-control` - Negative Control */
                phenotype?: "normal" | "tumor" | "negative-control" | "" | null;
                /** @description Filter where the associated the project has the given 'project_id'. */
                projectId?: number;
                /** @description * `very-poor` - VeryPoor
                 *     * `poor` - Poor
                 *     * `good` - Good
                 *     * `borderline` - Borderline */
                quality?: "very-poor" | "poor" | "good" | "borderline" | "" | null;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                sample?: string | null;
                /** @description A search term. */
                search?: string;
                subject?: string | null;
                /** @description * `10X` - Ten X
                 *     * `BiModal` - Bimodal
                 *     * `ctDNA` - Ct Dna
                 *     * `ctTSO` - Ct Tso
                 *     * `exome` - Exome
                 *     * `MeDIP` - Me Dip
                 *     * `Metagenm` - Metagenm
                 *     * `MethylSeq` - Methyl Seq
                 *     * `TSO-DNA` - TSO_DNA
                 *     * `TSO-RNA` - TSO_RNA
                 *     * `WGS` - Wgs
                 *     * `WTS` - Wts
                 *     * `other` - Other */
                type?: "10X" | "BiModal" | "ctDNA" | "ctTSO" | "exome" | "MeDIP" | "Metagenm" | "MethylSeq" | "TSO-DNA" | "TSO-RNA" | "WGS" | "WTS" | "other" | "" | null;
                /** @description * `clinical` - Clinical
                 *     * `research` - Research
                 *     * `qc` - Qc
                 *     * `control` - Control
                 *     * `bcl` - Bcl
                 *     * `manual` - Manual */
                workflow?: "clinical" | "research" | "qc" | "control" | "bcl" | "manual" | "" | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLibraryDetailList"];
                };
            };
        };
    };
    libraryRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this library. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryDetail"];
                };
            };
        };
    };
    libraryDestroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this library. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    libraryPartialUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this library. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PatchedLibrary"];
                "multipart/form-data": components["schemas"]["PatchedLibrary"];
                "application/json": components["schemas"]["PatchedLibrary"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Library"];
                };
            };
        };
    };
    libraryHistoryList: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A unique value identifying this library. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLibraryHistoryList"];
                };
            };
        };
    };
    projectList: {
        parameters: {
            query?: {
                description?: string | null;
                name?: string | null;
                orcabusId?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                projectId?: string | null;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedProjectDetailList"];
                };
            };
        };
    };
    projectRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this project. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectDetail"];
                };
            };
        };
    };
    projectDestroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this project. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    projectPartialUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this project. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProject"];
                "multipart/form-data": components["schemas"]["PatchedProject"];
                "application/json": components["schemas"]["PatchedProject"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
        };
    };
    projectHistoryList: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A unique value identifying this project. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedProjectHistoryList"];
                };
            };
        };
    };
    sampleList: {
        parameters: {
            query?: {
                externalSampleId?: string | null;
                /** @description Filter where it is not linked to a library. */
                isLibraryNone?: boolean;
                orcabusId?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                sampleId?: string | null;
                /** @description A search term. */
                search?: string;
                /** @description * `ascites` - Ascites
                 *     * `blood` - Blood
                 *     * `bone-marrow` - BoneMarrow
                 *     * `buccal` - Buccal
                 *     * `cell-line` - Cell_line
                 *     * `cfDNA` - Cfdna
                 *     * `cyst-fluid` - Cyst Fluid
                 *     * `DNA` - Dna
                 *     * `eyebrow-hair` - Eyebrow Hair
                 *     * `FFPE` - Ffpe
                 *     * `FNA` - Fna
                 *     * `OCT` - Oct
                 *     * `organoid` - Organoid
                 *     * `PDX-tissue` - Pdx Tissue
                 *     * `plasma-serum` - Plasma Serum
                 *     * `RNA` - Rna
                 *     * `tissue` - Tissue
                 *     * `skin` - Skin
                 *     * `water` - Water */
                source?: "ascites" | "blood" | "bone-marrow" | "buccal" | "cell-line" | "cfDNA" | "cyst-fluid" | "DNA" | "eyebrow-hair" | "FFPE" | "FNA" | "OCT" | "organoid" | "PDX-tissue" | "plasma-serum" | "RNA" | "tissue" | "skin" | "water" | "" | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSampleDetailList"];
                };
            };
        };
    };
    sampleRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this sample. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SampleDetail"];
                };
            };
        };
    };
    sampleDestroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this sample. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    samplePartialUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this sample. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSample"];
                "multipart/form-data": components["schemas"]["PatchedSample"];
                "application/json": components["schemas"]["PatchedSample"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Sample"];
                };
            };
        };
    };
    sampleHistoryList: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A unique value identifying this sample. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSampleHistoryList"];
                };
            };
        };
    };
    subjectList: {
        parameters: {
            query?: {
                /** @description Filter where it is not linked to a library. */
                isLibraryNone?: boolean;
                /** @description Filter based on 'library_id' of the library associated with the subject. */
                libraryId?: string;
                /** @description Filter based on 'orcabus_id' of the library associated with the subject. */
                libraryOrcabusId?: string;
                orcabusId?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
                subjectId?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSubjectDetailList"];
                };
            };
        };
    };
    subjectRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this subject. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubjectDetail"];
                };
            };
        };
    };
    subjectDestroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this subject. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subjectPartialUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this subject. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSubject"];
                "multipart/form-data": components["schemas"]["PatchedSubject"];
                "application/json": components["schemas"]["PatchedSubject"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subject"];
                };
            };
        };
    };
    subjectHistoryList: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A unique value identifying this subject. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSubjectHistoryList"];
                };
            };
        };
    };
    syncGsheetCreate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["SyncGSheet"];
                "multipart/form-data": components["schemas"]["SyncGSheet"];
                "application/json": components["schemas"]["SyncGSheet"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    syncPresignedCsvCreate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["SyncCustomCsv"];
                "multipart/form-data": components["schemas"]["SyncCustomCsv"];
                "application/json": components["schemas"]["SyncCustomCsv"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
}
