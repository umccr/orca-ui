/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/analysis/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["analysisList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/{orcabusId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["analysisRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysiscontext/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["analysiscontextList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysiscontext/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["analysiscontextRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysisrun/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["analysisrunList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysisrun/{orcabusId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["analysisrunRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payload/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["payloadList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payload/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["payloadRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflow/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflowList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflow/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflowRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflowrunList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/comment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflowrunCommentList"];
        put?: never;
        post: operations["workflowrunCommentCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/comment/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["workflowrunCommentPartialUpdate"];
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/comment/{id}/soft_delete/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["workflowrunCommentSoftDeleteDestroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/state/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflowrunStateList"];
        put?: never;
        /** @description Create a customed new state for a workflow run.
         *     Currently we support "Resolved", "Deprecated" */
        post: operations["workflowrunStateCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/state/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["workflowrunStatePartialUpdate"];
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/state/valid_states_map/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Valid states map for new state creation, update */
        get: operations["workflowrunStateValidStatesMapRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflowrunRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/rerun/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Trigger a workflow run rerun by emitting an event to EventBridge with an overridden workflow input payload. Current supported workflow: 'rnasum' */
        post: operations["workflowrunRerunCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/validate_rerun_workflows/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Allowed rerun workflows */
        get: operations["workflowrunValidateRerunWorkflowsRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/ongoing/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflowrunOngoingRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/stats/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflowrunStatsList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/stats/count_by_status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the count of records for each status: 'SUCCEEDED', 'ABORTED', 'FAILED', and 'Onging' State based on the query params. */
        get: operations["workflowrunStatsCountByStatusRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/stats/list_all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflowrunStatsListAllList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/unresolved/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflowrunUnresolvedRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AllowedRerunWorkflow: {
            isValid: boolean;
            allowedDatasetChoice: string[];
            validWorkflows: string[];
        };
        AnalysisContext: {
            orcabusId?: string;
            name: string;
            usecase: string;
            description: string;
            status: string;
        };
        AnalysisContextMin: {
            orcabusId?: string;
            name: string;
            usecase: string;
        };
        /** @description Serializer to define a detailed representation of an Analysis record,
         *     mainly used in individual record views. */
        AnalysisDetail: {
            orcabusId?: string;
            readonly contexts: components["schemas"]["AnalysisContext"][];
            readonly workflows: components["schemas"]["WorkflowMin"][];
            analysisName: string;
            analysisVersion: string;
            description: string;
            status: string;
        };
        AnalysisMin: {
            orcabusId?: string;
            analysisName: string;
            analysisVersion: string;
            status: string;
        };
        AnalysisRun: {
            orcabusId?: string;
            readonly analysis: components["schemas"]["AnalysisMin"];
            readonly storageContext: components["schemas"]["AnalysisContextMin"];
            readonly computeContext: components["schemas"]["AnalysisContextMin"];
            analysisRunName: string;
            comment?: string | null;
            status?: string | null;
        };
        AnalysisRunDetail: {
            orcabusId?: string;
            readonly libraries: components["schemas"]["Library"][];
            readonly analysis: components["schemas"]["AnalysisDetail"];
            readonly storageContext: components["schemas"]["AnalysisContext"];
            readonly computeContext: components["schemas"]["AnalysisContext"];
            analysisRunName: string;
            comment?: string | null;
            status?: string | null;
        };
        /**
         * @description * `BRCA` - BRCA
         *     * `THCA` - THCA
         *     * `HNSC` - HNSC
         *     * `LGG` - LGG
         *     * `KIRC` - KIRC
         *     * `LUSC` - LUSC
         *     * `LUAD` - LUAD
         *     * `PRAD` - PRAD
         *     * `STAD` - STAD
         *     * `LIHC` - LIHC
         *     * `COAD` - COAD
         *     * `KIRP` - KIRP
         *     * `BLCA` - BLCA
         *     * `OV` - OV
         *     * `SARC` - SARC
         *     * `PCPG` - PCPG
         *     * `CESC` - CESC
         *     * `UCEC` - UCEC
         *     * `PAAD` - PAAD
         *     * `TGCT` - TGCT
         *     * `LAML` - LAML
         *     * `ESCA` - ESCA
         *     * `GBM` - GBM
         *     * `THYM` - THYM
         *     * `SKCM` - SKCM
         *     * `READ` - READ
         *     * `UVM` - UVM
         *     * `ACC` - ACC
         *     * `MESO` - MESO
         *     * `KICH` - KICH
         *     * `UCS` - UCS
         *     * `DLBC` - DLBC
         *     * `CHOL` - CHOL
         *     * `LUAD-LCNEC` - LUAD-LCNEC
         *     * `BLCA-NET` - BLCA-NET
         *     * `PAAD-IPMN` - PAAD-IPMN
         *     * `PAAD-NET` - PAAD-NET
         *     * `PAAD-ACC` - PAAD-ACC
         *     * `PANCAN` - PANCAN
         * @enum {string}
         */
        DatasetEnum: "BRCA" | "THCA" | "HNSC" | "LGG" | "KIRC" | "LUSC" | "LUAD" | "PRAD" | "STAD" | "LIHC" | "COAD" | "KIRP" | "BLCA" | "OV" | "SARC" | "PCPG" | "CESC" | "UCEC" | "PAAD" | "TGCT" | "LAML" | "ESCA" | "GBM" | "THYM" | "SKCM" | "READ" | "UVM" | "ACC" | "MESO" | "KICH" | "UCS" | "DLBC" | "CHOL" | "LUAD-LCNEC" | "BLCA-NET" | "PAAD-IPMN" | "PAAD-NET" | "PAAD-ACC" | "PANCAN";
        Library: {
            orcabusId?: string;
            libraryId: string;
        };
        PaginatedAnalysisContextList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["AnalysisContext"][];
        };
        PaginatedAnalysisDetailList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["AnalysisDetail"][];
        };
        PaginatedAnalysisRunDetailList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["AnalysisRunDetail"][];
        };
        PaginatedPayloadList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["Payload"][];
        };
        PaginatedWorkflowList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["Workflow"][];
        };
        PaginatedWorkflowRunDetailList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["WorkflowRunDetail"][];
        };
        PatchedState: {
            orcabusId?: string;
            status?: string;
            /** Format: date-time */
            timestamp?: string;
            comment?: string | null;
            workflowRun?: string;
            payload?: string | null;
        };
        PatchedWorkflowRunComment: {
            orcabusId?: string;
            comment?: string;
            /** Format: date-time */
            readonly createdAt?: string;
            createdBy?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
            isDeleted?: boolean;
            workflowRun?: string;
        };
        Payload: {
            orcabusId?: string;
            payloadRefId: string;
            version: string;
            data: unknown;
        };
        /** @description For 'rnasum' workflow rerun only allow dataset to be overridden. */
        RnasumRerunInput: {
            dataset: components["schemas"]["DatasetEnum"];
        };
        State: {
            orcabusId?: string;
            status: string;
            /** Format: date-time */
            timestamp: string;
            comment?: string | null;
            workflowRun: string;
            payload?: string | null;
        };
        Workflow: {
            orcabusId?: string;
            workflowName: string;
            workflowVersion: string;
            executionEngine: string;
            executionEnginePipelineId: string;
        };
        WorkflowMin: {
            orcabusId?: string;
            workflowName: string;
            workflowVersion: string;
        };
        WorkflowRunComment: {
            orcabusId?: string;
            comment: string;
            /** Format: date-time */
            readonly createdAt: string;
            createdBy: string;
            /** Format: date-time */
            readonly updatedAt: string;
            isDeleted?: boolean;
            workflowRun: string;
        };
        WorkflowRunCountByStatus: {
            all: number;
            succeeded: number;
            aborted: number;
            failed: number;
            resolved: number;
            ongoing: number;
            deprecated: number;
        };
        WorkflowRunDetail: {
            orcabusId?: string;
            readonly currentState: {
                [key: string]: unknown;
            };
            readonly libraries: components["schemas"]["Library"][];
            readonly workflow: components["schemas"]["Workflow"];
            readonly analysisRun: components["schemas"]["AnalysisRun"];
            portalRunId: string;
            executionId?: string | null;
            workflowRunName?: string | null;
            comment?: string | null;
        };
        WorkflowRunRerun: components["schemas"]["RnasumRerunInput"];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    analysisList: {
        parameters: {
            query?: {
                analysisName?: string;
                analysisVersion?: string;
                contexts?: string[];
                description?: string;
                orcabusId?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
                status?: string;
                workflows?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAnalysisDetailList"];
                };
            };
        };
    };
    analysisRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this analysis. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnalysisDetail"];
                };
            };
        };
    };
    analysiscontextList: {
        parameters: {
            query?: {
                description?: string;
                name?: string;
                orcabusId?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
                status?: string;
                usecase?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAnalysisContextList"];
                };
            };
        };
    };
    analysiscontextRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnalysisContext"];
                };
            };
        };
    };
    analysisrunList: {
        parameters: {
            query?: {
                analysis?: string | null;
                analysisRunName?: string;
                comment?: string | null;
                computeContext?: string | null;
                libraries?: string[];
                orcabusId?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
                status?: string | null;
                storageContext?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAnalysisRunDetailList"];
                };
            };
        };
    };
    analysisrunRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this analysis run. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnalysisRunDetail"];
                };
            };
        };
    };
    payloadList: {
        parameters: {
            query?: {
                data?: unknown;
                orcabusId?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                payloadRefId?: string;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
                version?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPayloadList"];
                };
            };
        };
    };
    payloadRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payload"];
                };
            };
        };
    };
    workflowList: {
        parameters: {
            query?: {
                executionEngine?: string;
                executionEnginePipelineId?: string;
                orcabusId?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
                workflowName?: string;
                workflowVersion?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWorkflowList"];
                };
            };
        };
    };
    workflowRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
        };
    };
    workflowrunList: {
        parameters: {
            query?: {
                analysisRun?: string | null;
                comment?: string | null;
                executionId?: string | null;
                orcabusId?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                portalRunId?: string;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
                workflow?: string | null;
                workflowRunName?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWorkflowRunDetailList"];
                };
            };
        };
    };
    workflowrunCommentList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunComment"][];
                };
            };
        };
    };
    workflowrunCommentCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowRunComment"];
                "multipart/form-data": components["schemas"]["WorkflowRunComment"];
                "application/json": components["schemas"]["WorkflowRunComment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunComment"];
                };
            };
        };
    };
    workflowrunCommentPartialUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWorkflowRunComment"];
                "multipart/form-data": components["schemas"]["PatchedWorkflowRunComment"];
                "application/json": components["schemas"]["PatchedWorkflowRunComment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunComment"];
                };
            };
        };
    };
    workflowrunCommentSoftDeleteDestroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workflowrunStateList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["State"][];
                };
            };
        };
    };
    workflowrunStateCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["State"];
                "multipart/form-data": components["schemas"]["State"];
                "application/json": components["schemas"]["State"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["State"];
                };
            };
        };
    };
    workflowrunStatePartialUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PatchedState"];
                "multipart/form-data": components["schemas"]["PatchedState"];
                "application/json": components["schemas"]["PatchedState"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["State"];
                };
            };
        };
    };
    workflowrunStateValidStatesMapRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    workflowrunRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this workflow run. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunDetail"];
                };
            };
        };
    };
    workflowrunRerunCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this workflow run. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowRunRerun"];
                "multipart/form-data": components["schemas"]["WorkflowRunRerun"];
                "application/json": components["schemas"]["WorkflowRunRerun"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    workflowrunValidateRerunWorkflowsRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this workflow run. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AllowedRerunWorkflow"];
                };
            };
        };
    };
    workflowrunOngoingRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunDetail"];
                };
            };
        };
    };
    workflowrunStatsList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunDetail"][];
                };
            };
        };
    };
    workflowrunStatsCountByStatusRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunCountByStatus"];
                };
            };
        };
    };
    workflowrunStatsListAllList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunDetail"][];
                };
            };
        };
    };
    workflowrunUnresolvedRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunDetail"];
                };
            };
        };
    };
}
