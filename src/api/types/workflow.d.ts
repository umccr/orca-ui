/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/analysis/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiV1AnalysisList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysis/{orcabusId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Since we have custom orcabus_id prefix for each model, we need to remove the prefix before retrieving it. */
        get: operations["apiV1AnalysisRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysiscontext/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiV1AnalysiscontextList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysiscontext/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Since we have custom orcabus_id prefix for each model, we need to remove the prefix before retrieving it. */
        get: operations["apiV1AnalysiscontextRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysisrun/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiV1AnalysisrunList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analysisrun/{orcabusId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Since we have custom orcabus_id prefix for each model, we need to remove the prefix before retrieving it. */
        get: operations["apiV1AnalysisrunRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payload/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiV1PayloadList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payload/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Since we have custom orcabus_id prefix for each model, we need to remove the prefix before retrieving it. */
        get: operations["apiV1PayloadRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflow/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiV1WorkflowList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflow/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Since we have custom orcabus_id prefix for each model, we need to remove the prefix before retrieving it. */
        get: operations["apiV1WorkflowRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiV1WorkflowrunList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/comment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiV1WorkflowrunCommentList"];
        put?: never;
        post: operations["apiV1WorkflowrunCommentCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/comment/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["apiV1WorkflowrunCommentPartialUpdate"];
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/comment/{id}/soft_delete/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["apiV1WorkflowrunCommentSoftDeleteDestroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/state/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiV1WorkflowrunStateList"];
        put?: never;
        post: operations["apiV1WorkflowrunStateCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/state/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["apiV1WorkflowrunStatePartialUpdate"];
        trace?: never;
    };
    "/api/v1/workflowrun/{orcabusId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Since we have custom orcabus_id prefix for each model, we need to remove the prefix before retrieving it. */
        get: operations["apiV1WorkflowrunRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/count_by_status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the count of records for each status: 'SUCCEEDED', 'ABORTED', 'FAILED', and 'Onging' State. */
        get: operations["/api/v1/workflowRun/countByStatus/"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/ongoing/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiV1WorkflowrunOngoingRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflowrun/unresolved/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiV1WorkflowrunUnresolvedRetrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Serializer to define a default representation of an Analysis record,
         *     mainly used in record listings. */
        Analysis: {
            readonly orcabusId: string;
            analysisName: string;
            analysisVersion: string;
            description: string;
            status: string;
            contexts: string[];
            workflows: string[];
        };
        AnalysisContext: {
            readonly orcabusId: string;
            name: string;
            usecase: string;
            description: string;
            status: string;
        };
        /** @description Serializer to define a detailed representation of an Analysis record,
         *     mainly used in individual record views. */
        AnalysisDetail: {
            readonly orcabusId: string;
            readonly contexts: components["schemas"]["AnalysisContext"][];
            readonly workflows: components["schemas"]["WorkflowMin"][];
            analysisName: string;
            analysisVersion: string;
            description: string;
            status: string;
        };
        AnalysisRun: {
            readonly orcabusId: string;
            analysisRunName: string;
            comment?: string | null;
            status?: string | null;
            computeContext?: string | null;
            storageContext?: string | null;
            analysis?: string | null;
        };
        AnalysisRunDetail: {
            readonly orcabusId: string;
            readonly libraries: components["schemas"]["Library"][];
            readonly analysis: components["schemas"]["Analysis"];
            readonly storageContext: components["schemas"]["AnalysisContext"];
            readonly computeContext: components["schemas"]["AnalysisContext"];
            analysisRunName: string;
            comment?: string | null;
            status?: string | null;
        };
        Library: {
            readonly orcabusId: string;
            libraryId: string;
        };
        PaginatedAnalysisContextList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["AnalysisContext"][];
        };
        PaginatedAnalysisDetailList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["AnalysisDetail"][];
        };
        PaginatedAnalysisRunDetailList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["AnalysisRunDetail"][];
        };
        PaginatedPayloadList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["Payload"][];
        };
        PaginatedWorkflowList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["Workflow"][];
        };
        PaginatedWorkflowRunDetailList: {
            links: {
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=4
                 */
                next?: string | null;
                /**
                 * Format: uri
                 * @example http://api.example.org/accounts/?page=2
                 */
                previous?: string | null;
            };
            pagination: {
                count?: number;
                page?: number;
                rowsPerPage?: number;
            };
            results: components["schemas"]["WorkflowRunDetail"][];
        };
        PatchedState: {
            readonly orcabusId?: string;
            status?: string;
            /** Format: date-time */
            timestamp?: string;
            comment?: string | null;
            workflowRun?: string;
            payload?: string | null;
        };
        PatchedWorkflowRunComment: {
            readonly orcabusId?: string;
            comment?: string;
            /** Format: date-time */
            readonly createdAt?: string;
            createdBy?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
            isDeleted?: boolean;
            workflowRun?: string;
        };
        Payload: {
            readonly orcabusId: string;
            payloadRefId: string;
            version: string;
            data: unknown;
        };
        State: {
            readonly orcabusId: string;
            status: string;
            /** Format: date-time */
            timestamp: string;
            comment?: string | null;
            workflowRun: string;
            payload?: string | null;
        };
        Workflow: {
            readonly orcabusId: string;
            workflowName: string;
            workflowVersion: string;
            executionEngine: string;
            executionEnginePipelineId: string;
        };
        WorkflowMin: {
            readonly orcabusId: string;
            workflowName: string;
            workflowVersion: string;
        };
        WorkflowRunComment: {
            readonly orcabusId: string;
            comment: string;
            /** Format: date-time */
            readonly createdAt: string;
            createdBy: string;
            /** Format: date-time */
            readonly updatedAt: string;
            isDeleted?: boolean;
            workflowRun: string;
        };
        WorkflowRunCountByStatus: {
            all: number;
            succeeded: number;
            aborted: number;
            failed: number;
            resolved: number;
            ongoing: number;
        };
        WorkflowRunDetail: {
            readonly orcabusId: string;
            readonly currentState: {
                [key: string]: unknown;
            };
            readonly libraries: components["schemas"]["Library"][];
            readonly workflow: components["schemas"]["Workflow"];
            readonly analysisRun: components["schemas"]["AnalysisRun"];
            portalRunId: string;
            executionId?: string | null;
            workflowRunName?: string | null;
            comment?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    apiV1AnalysisList: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAnalysisDetailList"];
                };
            };
        };
    };
    apiV1AnalysisRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this analysis. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnalysisDetail"];
                };
            };
        };
    };
    apiV1AnalysiscontextList: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAnalysisContextList"];
                };
            };
        };
    };
    apiV1AnalysiscontextRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnalysisContext"];
                };
            };
        };
    };
    apiV1AnalysisrunList: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAnalysisRunDetailList"];
                };
            };
        };
    };
    apiV1AnalysisrunRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this analysis run. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnalysisRunDetail"];
                };
            };
        };
    };
    apiV1PayloadList: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPayloadList"];
                };
            };
        };
    };
    apiV1PayloadRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payload"];
                };
            };
        };
    };
    apiV1WorkflowList: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWorkflowList"];
                };
            };
        };
    };
    apiV1WorkflowRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
        };
    };
    apiV1WorkflowrunList: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                rowsPerPage?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWorkflowRunDetailList"];
                };
            };
        };
    };
    apiV1WorkflowrunCommentList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunComment"][];
                };
            };
        };
    };
    apiV1WorkflowrunCommentCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowRunComment"];
                "multipart/form-data": components["schemas"]["WorkflowRunComment"];
                "application/json": components["schemas"]["WorkflowRunComment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunComment"];
                };
            };
        };
    };
    apiV1WorkflowrunCommentPartialUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWorkflowRunComment"];
                "multipart/form-data": components["schemas"]["PatchedWorkflowRunComment"];
                "application/json": components["schemas"]["PatchedWorkflowRunComment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunComment"];
                };
            };
        };
    };
    apiV1WorkflowrunCommentSoftDeleteDestroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiV1WorkflowrunStateList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["State"][];
                };
            };
        };
    };
    apiV1WorkflowrunStateCreate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["State"];
                "multipart/form-data": components["schemas"]["State"];
                "application/json": components["schemas"]["State"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["State"];
                };
            };
        };
    };
    apiV1WorkflowrunStatePartialUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PatchedState"];
                "multipart/form-data": components["schemas"]["PatchedState"];
                "application/json": components["schemas"]["PatchedState"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["State"];
                };
            };
        };
    };
    apiV1WorkflowrunRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this workflow run. */
                orcabusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunDetail"];
                };
            };
        };
    };
    "/api/v1/workflowRun/countByStatus/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunCountByStatus"];
                };
            };
        };
    };
    apiV1WorkflowrunOngoingRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunDetail"];
                };
            };
        };
    };
    apiV1WorkflowrunUnresolvedRetrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowRunDetail"];
                };
            };
        };
    };
}
